require 'weary/resource'

module Weary
  autoload :Route, 'weary/route'

  class Client

    # Internal: HTTP Request verbs supported by Weary. These translate to class
    # methods of Client.
    REQUEST_METHODS = [
      :copy, :delete, :get, :head, :lock, :mkcol, :move, :options,
      :patch, :post, :propfind, :proppatch, :put, :trace, :unlock
    ]

    class << self
      # Public: Generate a resource of the specified REQUEST_METHOD. This
      # method is defined for each of the REQUEST_METHODS.
      #
      # name  - A Symbol name or descriptor of a resource to dynamically
      #         generate an instance method of the same name.
      # path  - A String path to the resource. If the class's domain is set it
      #         will be prepended to this path to form the resource's uri.
      # block - An optional block to be used to further customize the resource.
      #
      # Returns a Response object describing an HTTP endpoint.
      #
      # Signature
      #
      #   <method>(name, path, &block)
      #
      # method - An HTTP request method (and member of REQUEST_METHODS).
      REQUEST_METHODS.each do |request_method|
        define_method request_method do |name, path, &block|
          resource(name, request_method.to_s.upcase, path, &block)
        end
      end

      # Public: An accessor to set the domain where the client's resources are
      # located. This is prepended to the resources' path to form the resource
      # uri.
      #
      # host - An optional String to set the client domain.
      #
      # Returns the domain String.
      def domain(host=nil)
        @domain = host unless host.nil?
        @domain ||= ""
      end

      # Public: An accessor to set optional parameters permitted by all
      # resources described by the client.
      #
      # params - Zero or more Symbol parameters expected by the resources.
      #
      # Returns an Array of parameters.
      def optional(*params)
        @optional = params unless params.empty?
        @optional ||= []
      end

      # Public: An accessor to set parameters required by the all of the
      # resources of the client.
      #
      # params - Zero or more Symbol parameters required by the resources.
      #
      # Returns an Array of parameters.
      def required(*params)
        @required = params unless params.empty?
        @required ||= []
      end

      # Public: An accessor to set default parameters to be used by the all of
      # the resources described by the client.
      #
      # hash - An optional Hash of key/value pairs describing the
      #        default parameters to be sent to the resources
      #
      # Returns a Hash of the default parameters sent to all resources.
      def defaults(hash=nil)
        @defaults = hash unless hash.nil?
        @defaults ||= {}
      end

      # Public: An accessor to set HTTP request headers for all of the client's
      # resources.
      #
      # hash - An optional Hash of key/value pairs that are sent as HTTP
      #        request headers when a resource's request is performed.
      #
      # Returns a Hash of the headers.
      def headers(hash=nil)
        @headers = hash unless hash.nil?
        @headers ||= {}
      end

      # Public: Send a Rack middleware to all of the requests generated by
      # the client.
      #
      # middleware - An object that implements the rack middleware interface.
      # args       - Zero or more optional arguments to send to the middleware.
      # block      - An optional block to send to the middleware.
      #
      # Returns an Array of middlewares.
      def use(middleware, *args, &block)
        @middlewares ||= []
        @middlewares << [middleware, args, block]
      end

      # Internal: Create and build a resource description of a request. The
      # resource is then stored in an internal hash, generating an instance
      # method.
      #
      # name   - A Symbol name/descriptor of the resource.
      # method - A Symbol or String of the request method used in the request.
      # path   - A String path to the resource that is appended to the domain
      #          to form the uri.
      #
      # Yields the Resource for further construction.
      #
      # Returns the generated Resource.
      def resource(name, method, path="")
        resource = Weary::Resource.new method, "#{domain}#{path}"
        resource.optional *optional
        resource.required *required
        resource.defaults defaults
        resource.headers headers
        yield resource if block_given?
        self[name] = resource
      end

      def resources
        @resources ||= {}
      end

      def []=(name,resource)
        store name, resource
      end

      def [](name)
        resources[name]
      end

      def route
        Weary::Route.new resources.values, domain
      end

      def call(env)
        route.call(env)
      end

      private

      def store(name, resource)
        raise ArgumentError, "Expected a Weary::Resource but got #{resource.inspect}" \
          unless resource.is_a? Weary::Resource
        key = name.to_sym
        build_method(key, resource)
        resources[key] = resource
      end

      def build_method(key, resource)
        stack = if @middlewares && !@middlewares.empty?
          stack = lambda {|r| @middlewares.each {|middleware| r.use *middleware } }
        end
        define_method(key) do |*parameters, &block|
          parameters = parameters.first || {}
          @defaults ||= {}
          request = resource.request(@defaults.merge(parameters), &block)
          stack.call(request) unless stack.nil?
          request
        end
      end
    end

  end
end